import {
    lineNumberPrefix,
    IDENTIFIER_CATEGORIES,
    AST
} from './asts'
import { CustomPanel } from "./panels"
declare var app : any

// Render a writer as an HTML structure. This class is
// independent of any kind of interface. The HTML code can be
// put in a regular web page. However, no direct support is provided
// for clicks on element. Use CodeZone to add behavior.


export class HTMLRenderer {
    private ast: any;

    constructor(ast) {
        if (ast === undefined) {
            throw "ERROR : 'ast' of HTMLRenderer is undefined."
        }
        this.ast = ast
    }

    getHTMLForToken(token) {
        if (token === undefined) {
            throw "ERROR : 'token' of getHTMLForToken is undefined."
        }
        if (token.element) {
            const html = (
                '<a href="#" class="{{category-token}}" element="{{id}}">{{text}}</a>'
                    // @ts-ignore   TODO .replaceAll
                    .replaceAll("{{id}}",  token.element._id)
                    .replaceAll("{{category-token}}",
                        this._getCategoryClass(token.category))
                    .replaceAll("{{text}}", token.text))
            return html
        } else {
            const html = (
                '<span class="token-{{category}}">{{text}}</span>'
                    // @ts-ignore   TODO .replaceAll
                    .replaceAll("{{category}}", token.category)
                    .replaceAll("{{text}}", token.text))
            return html
        }
    }

    getHTMLForLineNumber(num) {
        if (num === undefined) {
            throw "ERROR : parameter 'num' of getHTMLForLineNumber is undefined."
        }
        const max_lines = this.ast.lines.length
        const line_number_pad = lineNumberPrefix(num, max_lines)
        return (
            '<span class="line-number">{{pad}} </span>'
                // @ts-ignore   TODO .replaceAll
                .replaceAll("{{pad}}",line_number_pad))
    }

    getHTMLForLine(line) {
        if (line === undefined) {
            throw "ERROR : 'line' of getHTMLForLine is undefined."
        }
        const prefix = (
            '<span id="line-{{num}}" class="line" line="{{num}}">'
            + '{{pad_number}}'
            + '{{body}}'
            + '</span>')
        const pad_number = this.getHTMLForLineNumber(line.number)
        const body = (line.tokens.map(token =>
            this.getHTMLForToken(token)).join(''))
        return (prefix
            // @ts-ignore   TODO .replaceAll
            .replaceAll('{{num}}', line.number)
            .replaceAll('{{pad_number}}', pad_number)
            .replaceAll('{{body}}', body))
    }

    getHTMLForLines(lines) {
        if (lines === undefined) {
            throw "ERROR : 'lines' of getHTMLForLines is undefined."
        }
        return lines.map(line => this.getHTMLForLine(line)).join('\n')
    }

    getHTML() {
        const html = '<div id="code-zone">{{body}}</div>'
        const body = this.getHTMLForLines(this.ast.lines)

        return (
            // @ts-ignore   TODO .replaceAll
            html.replaceAll('{{body}}', body)
        )
    }

    _getCategoryClass(category) {
        return 'token-' + category
    }

    // Return something like 'token-identifier1, token-identifier2, ...'
    getIdentifiersSelector() {
        return (
            IDENTIFIER_CATEGORIES.map( category => {
                return '.'+this._getCategoryClass(category)
            })
            .join(', '))
    }

}

/**
 * A DOM element containing the code generated by a HTMLRenderer.
 * This class does not depend on its DOM container. This means that
 * the code zone can be inserted everywhere, not necessarily in a
 * CustomPanel. Click behavior is added to the HTML generated via
 * HTMLRenderer.
 */

export class CodeZone {
    private $container: any;
    private ast: AST | undefined;
    private renderer: HTMLRenderer | undefined;

    constructor($container) {
        if ($container === undefined) {
            throw "ERROR: 'CodeZone.constructor()': $container is undefined."
        }
        $container.innerHTML='Code coming soon ...'
        this.$container = $container
        this.ast = undefined
        this.renderer = undefined
    }

    build(ast : AST) {
        if (ast === undefined) {
            throw "ERROR: 'CodeZone.build()': CodeZone is undefined."
        }
        this.ast = ast
        this.renderer = new HTMLRenderer(this.ast)
        const html = this.renderer.getHTML()
        this.$container.innerHTML = html
        this._addOnClickBehavior()
        if (false) { // TEST:
            this.__testHighligthtLine()
        }
    }

    _addOnClickBehavior() {
        const selector = this.renderer.getIdentifiersSelector()
        $(selector).click( (event) => {
            const element_id = (
                event.currentTarget.attributes['element'].value)
            const element = app.repository.get(element_id)
            if (element) {
                app.modelExplorer.select(element, true)
            } else {
                console.error('[DEBUG]: element "'+element_id+'" not found')
            }
        })
        return false
    }


    // DEMO: TEST:
    __testHighligthtLine() {
        this.highligthtLine(10, true)
        this.highligthtLine(5, true)
    }

    highligthtLine(num,
                  highlight=true,
                  highlight_number = false) {
        if (num < 1 || num > this.ast.lines.length) {
            throw("highligthtLine: Line number" + num + "is invalid.")
        } else {
            let query=(
                '#code-zone span.line[line='+num+']')
            if (highlight_number) {
                query += ' span.line-number'
            }
            $(query).addClass("selected")
        }
    }
}


// This class put together a (custom) console  panel
// and put inside of it a CodeZone

export class CodeInterface {
    private consolePanel: CustomPanel
    private ast: AST | undefined
    private codeZone: CodeZone | undefined

    constructor(consolePanel : CustomPanel) {
        this.consolePanel = consolePanel
        this.ast = undefined
        this.codeZone = undefined
    }

    build(ast : AST) {
        if (ast === undefined) {
            throw "ERROR: 'ast' of CodeInterface is undefined."
        }
        this.ast = ast
        this.codeZone = new CodeZone(
            this.consolePanel.getContentContainer())
        this.codeZone.build(this.ast)
    }
}


    //     app.repository.get(element_id)
    // return this.getHTMLForElementToken(token)

        // CONSOLE_PANEL.setText(html)
    //$link = CONSOLE_PANEL.$panel.find('.link')
    // $link.click(function () {
    //     console.log('debug: CLICK!')
    //     CONSOLE_PANEL.hide()
    // })


    // generator.doCompile()

// $("li").each(function(i, element) {
//   var li = $(element);
//
//   if (li.text() == "Orange") {
//     li.addClass("selected");
//
//     // Get position of selected element relative to top of document
//     var position = li.offset().top;
//
//     // Get the height of the window
//     var windowHeight = $(window).height();
//
//     // Scroll to and center the selected element in the viewport
//     $("body").scrollTop(position - (windowHeight/2));
//   }
// });


exports.Renderer = HTMLRenderer
exports.CodeZone = CodeZone
exports.CodeInterface = CodeInterface