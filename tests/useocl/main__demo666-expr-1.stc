-> '@@@1' : String
-> '@@@2' : String
-> '@@@3' : String
-> '@@@4' : String
-> '@@@5' : String
-> '@@@6' : String
-> '@@@7' : String
<input>:1:0: Variable `Oooops' in expression `Oooops.monday' is undefined.
-> '@@@8' : String
-> '@@@9' : String
-> '@@@10' : String
-> '@@@11' : String
-> '@@@12' : String
-> '@@@13' : String
-> '@@@14' : String
-> '@@@15' : String
-> '@@@16' : String
<input>:1:0: Type mismatch in assignment expression. Expected type `Integer', found `String'.
-> '@@@17' : String
-> '@@@18' : String
-> '@@@19' : String
-> '@@@20' : String
-> '@@@21' : String
-> '@@@22' : String
-> '@@@23' : String
-> '@@@24' : String
Error: Unknown command `this is not a command'. Try `help'.
-> '@@@25' : String
<input>:1:7: Warning: application of `saintaxe' to a single value should be done with `.' instead of `->'.
<input>:1:7: Undefined operation named `saintaxe' in expression `Integer.saintaxe()'.
-> '@@@26' : String
Detailed results of subexpressions:
  sandrine : Employee = Employee1
  sandrine.name : String = 'Sandrine'
-> 'Sandrine' : String
-> '@@@27' : String
Detailed results of subexpressions:
  turbo : Project = turbo
  turbo.name : String = 'Maxi turbo project'
-> 'Maxi turbo project' : String
-> '@@@28' : String
<input>:2:7: Undefined operation `Integer.+(String)'.
-> '@@@29' : String
checking structure...
checked structure in 1ms.
checking invariants...
checking invariant (1) `Department::i1a': OK.
checking invariant (2) `Department::i2': OK.
checking invariant (3) `Employee::i1b': FAILED.
  -> false : Boolean
Results of subexpressions:
  Employee.allInstances : Set(Employee) = Set{Employee1,djamel,ioannis}
  self : Employee = djamel
  self.salary : OclVoid = null
  (self.salary >= 0) : OclVoid = null
  self : Employee = ioannis
  self.salary : Integer = 1900
  0 : Integer = 0
  (self.salary >= 0) : Boolean = true
  self : Employee = Employee1
  self.salary : Integer = 2600
  0 : Integer = 0
  (self.salary >= 0) : Boolean = true
  Employee.allInstances->forAll(self : Employee | (self.salary >= 0)) : Boolean = false
Instances of Employee violating the invariant:
  -> Set{djamel} : Set(Employee)
checking invariant (4) `Employee::i3': OK.
checking invariant (5) `Project::i1c': OK.
checking invariant (6) `Project::i4': OK.
checking invariant (7) `Project::i5': OK.
checked 7 invariants in 0.014s, 1 failure.
-> '@@@30' : String
checking structure...
checked structure in 0ms.
checking invariants...
checking invariant (1) `Department::i1a': OK.
checking invariant (2) `Department::i2': OK.
checking invariant (3) `Employee::i1b': FAILED.
  -> false : Boolean
checking invariant (4) `Employee::i3': OK.
checking invariant (5) `Project::i1c': OK.
checking invariant (6) `Project::i4': OK.
checking invariant (7) `Project::i5': OK.
checked 7 invariants in 0.002s, 1 failure.
