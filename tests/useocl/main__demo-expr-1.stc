-> '@@@1' : String
-> '@@@2' : String
-> '@@@3' : String
-> '@@@4' : String
-> '@@@5' : String
-> '@@@6' : String
-> '@@@7' : String
-> '@@@8' : String
-> '@@@9' : String
-> '@@@10' : String
-> '@@@11' : String
-> '@@@12' : String
-> '@@@13' : String
-> '@@@14' : String
-> '@@@15' : String
-> '@@@16' : String
-> '@@@17' : String
-> '@@@18' : String
-> '@@@19' : String
-> '@@@20' : String
-> '@@@21' : String
-> '@@@22' : String
-> '@@@23' : String
Detailed results of subexpressions:
  Department.allInstances : Set(Department) = Set{computing}
-> Set{computing} : Set(Department)
-> '@@@24' : String
Detailed results of subexpressions:
  sandrine : Employee = sandrine
  sandrine.departments : Set(Department) = Set{computing}
  $e : Department = computing
  $e.name : String = 'Computing departement'
  sandrine.departments->collect($e : Department | $e.name) : Bag(String) = Bag{'Computing departement'}
-> Bag{'Computing departement'} : Bag(String)
-> '@@@25' : String
Detailed results of subexpressions:
  sandrine : Employee = sandrine
  sandrine.departments : Set(Department) = Set{computing}
  $e : Department = computing
  $e.budget : Integer = 10000
  sandrine.departments->collect($e : Department | $e.budget) : Bag(Integer) = Bag{10000}
  sandrine.departments->collect($e : Department | $e.budget)->sum : Integer = 10000
  ioannis : Employee = ioannis
  ioannis.salary : Integer = 1900
  (sandrine.departments->collect($e : Department | $e.budget)->sum + ioannis.salary) : Integer = 11900
-> 11900 : Integer
-> '@@@26' : String
checking structure...
checked structure in 0ms.
checking invariants...
checking invariant (1) `Department::i1a': OK.
checking invariant (2) `Department::i2': OK.
checking invariant (3) `Employee::i1b': OK.
checking invariant (4) `Employee::i3': OK.
checking invariant (5) `Project::i1c': OK.
checking invariant (6) `Project::i4': OK.
checking invariant (7) `Project::i5': OK.
checked 7 invariants in 0.011s, 0 failures.
-> '@@@27' : String
checking structure...
checked structure in 1ms.
checking invariants...
checking invariant (1) `Department::i1a': OK.
checking invariant (2) `Department::i2': OK.
checking invariant (3) `Employee::i1b': OK.
checking invariant (4) `Employee::i3': OK.
checking invariant (5) `Project::i1c': OK.
checking invariant (6) `Project::i4': OK.
checking invariant (7) `Project::i5': OK.
checked 7 invariants in 0.002s, 0 failures.
